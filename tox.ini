[tox]
skipsdist = True
envlist = lint,default
requires = tox-venv
           tox-pip-version
           tox-docker>=3.0.0
provision_tox_env=provision

source_package=dhos_services_api
all_sources = {[tox]source_package} tests/ integration-tests/

[docker:neo4j]
image: neo4j:3.5
environment =
    NEO4J_AUTH=none
ports=7474:7474/tcp
    7687:7687/tcp

[docker:db]
image = postgres:13-alpine
environment =
    POSTGRES_USER=dhos_services
    POSTGRES_DB=dhos_services
    POSTGRES_PASSWORD=TopSecretPassword
ports=15432:5432/tcp
healthcheck_cmd = pg_isready -U $POSTGRES_USER
healthcheck_interval = 2
healthcheck_timeout = 5
healthcheck_start_period = 2

[flake8]
max-line-length = 100

[pytest]
filterwarnings =
    ignore::DeprecationWarning:neomodel.relationship
    ignore::DeprecationWarning:jose
    ignore::DeprecationWarning:marshmallow

[mypy]
namespace_packages=True
ignore_missing_imports=False
disallow_untyped_defs=True
plugins = sqlalchemy.ext.mypy.plugin

[mypy-neo4j,environs,lazy_import,neomodel.*,neo4j.*,pytest,pytest_mock.*,requests_mock.*,_pytest.*,jsonpath_ng,jose,apispec.*,apispec_webframeworks.*,connexion,freezegun.*,kombu.*,sqlalchemy.*,flask_sqlalchemy]
ignore_missing_imports = True

[mypy-auth0_api_client.*,neobolt,neobolt.exceptions,draymed.*,kombu_batteries_included,Cryptodome.*,tenacity,faker,flask.*,mock,behave.*,jsonpatch,reportportal_behave.*,pydantic,dictdiffer,pytest_alembic]
ignore_missing_imports = True

[testenv:provision]
envdir={toxworkdir}/.provision

[testenv:default]
docker =
    neo4j
    db

[testenv:install-deps]
commands =
    poetry export -f requirements.txt -o {envtmpdir}/poetry-requirements.txt --with-credentials --without-hashes --dev
    pip install --no-deps -r {envtmpdir}/poetry-requirements.txt
allowlist_externals =
        poetry
        true

[testenv:openapi]
docker =
    neo4j
    db
commands = pip install --upgrade pip
    poetry install
    bash -c "while ! curl -s -o /dev/null http://localhost:$NEO4J_7474_TCP_PORT/; do sleep 0.2; done"
    bash -c "NEO4J_DB_PORT=$NEO4J_7687_TCP_PORT python3 -m flask create-openapi dhos_services_api/openapi/openapi.yaml"
allowlist_externals =
        bash
        poetry
        true

[testenv]
envdir={toxworkdir}/py39
pip_version = pip>=21.1
setenv = REDIS_INSTALLED = False
         ENVIRONMENT = DEVELOPMENT
         IGNORE_JWT_VALIDATION = True
         AUTH0_DOMAIN=https://login-sandbox.sensynehealth.com/
         AUTH0_AUDIENCE=https://dev.sensynehealth.com/
         AUTH0_METADATA=https://gdm.sensynehealth.com/metadata
         AUTH0_JWKS_URL=https://login-sandbox.sensynehealth.com/.well-known/jwks.json
         HS_KEY=secret
         PROXY_URL=http://localhost/
         AUTH0_CUSTOM_DOMAIN=dev
         CUSTOMER_CODE=DEV
         RABBITMQ_DISABLED=true
         LOG_LEVEL=INFO
         LOG_FORMAT=COLOUR
         NO_PROXY=*
         FLASK_APP={[tox]source_package}/autoapp.py
         DHOS_USERS_API_HOST=http://dhos-users
         DATABASE_HOST={env:DATABASE_HOST:localhost}
         DATABASE_PORT=15432
         DATABASE_USER=dhos_services
         DATABASE_NAME=dhos_services
         DATABASE_PASSWORD=TopSecretPassword

passenv = CIRCLECI
          NEO4J_DB_URL


commands = pip install --upgrade pip
           poetry install -v
           black --check {[tox]source_package} tests
           isort {[tox]source_package} tests/ --check-only
           mypy --config-file {toxinidir}/tox.ini {[tox]source_package}
           bandit -r {[tox]source_package} -lll
           safety check -i 41773 # ignore neomodel security as neo4j driver incompatible with neo4j 3.4
           coverage run --source {[tox]source_package} -m pytest --neo4j {posargs}
           coverage report
           coverage xml -i -o coverage-reports/coverage.xml
allowlist_externals =
        bandit
        black
        coverage
        isort
        mypy
        poetry
        python
        safety
        sh
        true
list_dependencies_command = true


[testenv:lint]
description = Run black, isort, and mypy to clean up source files
commands =
       black {[tox]all_sources}
       isort --profile black {[tox]all_sources}
       mypy --config-file tox.ini {[tox]source_package} tests/ integration-tests/

[testenv:debug]
docker =
    neo4j
    db
description = Run last failing unit test and invoke debugger on errors
commands =
    pytest --lf --pdb --neo4j {posargs}
setenv = {[testenv]setenv}
    SQLALCHEMY_ECHO=true

[testenv:update]
description = Update poetry lock files
commands = poetry update

[testenv:flask]
docker =
    neo4j
    db
description = Runs flask within the tox environment. Pass arguments after `--`.
    e.g. `tox -e flask -- --help` for a list of commands.
    Use this to create database migrations.
commands =
    poetry install
    bash -c "while ! curl -s -o /dev/null http://localhost:7474/; do sleep 0.2; done"
    python -m flask db upgrade
    python -m flask {posargs:--help}
setenv = {[testenv]setenv}
    SQLALCHEMY_ECHO=true
allowlist_externals =
        bash
        poetry
        python
        true

[testenv:readme]
description = Updates the README file with database diagram and commands. (Requires graphviz `dot` is installed)
commands =
    poetry install
    python docs/make_schema.py
setenv = {[testenv]setenv}
    PYTHONPATH={toxinidir}
